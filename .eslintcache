[{"/Users/paquitaladelbarrio/Documents/pr-hummus/chat-typescript/src/App.tsx":"1","/Users/paquitaladelbarrio/Documents/pr-hummus/chat-typescript/src/index.tsx":"2"},{"size":7200,"mtime":1611997328675,"results":"3","hashOfConfig":"4"},{"size":635,"mtime":1611982301602,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1grz4qr",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/paquitaladelbarrio/Documents/pr-hummus/chat-typescript/src/App.tsx",["11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"import React, { useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { VerticalBox, HorizontalBox, Subtitle, TextInput, Text, Header, Button } from \"pakinski-ui\"\nimport { Socket } from \"socket.io-client\"\nimport { useCookies } from 'react-cookie';\nimport Moment from 'react-moment';\n\n\n\n\n\n\nexport const App = ({ auth }) => {\n\n  const [connected, setConnected] = useState(false)\n  const [validSession, setValidSession] = useState(false)\n  const [roomID, setRoomID] = useState(\"\")\n\n  const [cookies, setCookies, deleteCookie] = useCookies([\"auth\", \"username\"])\n\n  useEffect(() => {\n\n    auth.on(\"connect\", () => {\n      console.log(\"connection established\")\n      setConnected(true)\n    })\n\n\n\n\n  }, [])\n\n\n\n\n\n  const authenticate = () => {\n\n\n\n  }\n\n\n\n\n\n\n  //attempt to reconnect if lost connection to server\n  useEffect(() => {\n\n\n    //connected, checking \n\n\n    if (!connected) { return console.log(\"not connected\") }\n    console.log(\"connection to server established\")\n\n    let reconnectFailed = false\n\n    if (cookies.auth) {\n\n      console.log(\"auth cookie detected, attempting to reconnect\")\n\n\n      auth.emit(\"reconnect\", cookies.auth, (res) => {\n\n        let { status, message } = res\n\n        console.log(res)\n\n        if (status === 1) {\n\n          setConnected(true)\n          setValidSession(true)\n\n          console.log(message)\n          return\n\n        } else {\n          console.log('reconnect failed')\n          deleteCookie(\"auth\")\n          deleteCookie(\"username\")\n          reconnectFailed = true\n        }\n\n      })\n\n    }\n\n  }, [connected])\n\n\n  if (!validSession) return <AuthScreen auth={auth} setCookies={setCookies} setValidSession={setValidSession} />\n  if (validSession && roomID === \"\") return <Lobby setRoomID={setRoomID} auth={auth} />\n  if (validSession && roomID !== \"\") return <Room auth={auth} roomID={roomID} />\n\n  return (\n    <VerticalBox>\n\n      <Header>{connected ? \"Connected to server\" : \"Not connected to Server\"}</Header>\n\n      <Header>Welcome {cookies.username}</Header>\n\n\n    </VerticalBox>\n  );\n}\n\n\n\nconst AuthScreen = ({ auth, setCookies, setValidSession }) => {\n\n\n  const [authErr, setAuthErr] = useState(\"\")\n  const [text, setText] = useState(\"\")\n\n\n\n  const connect = () => {\n\n    if (text.length === 0) return setAuthErr(\"Cannot be empty\")\n\n    auth.emit(\"authenticate\", text, (res) => {\n\n      let { status, message, authCookie, username } = res\n\n      if (status === 0) {\n        setText(\"\")\n        return setAuthErr(message)\n      }\n\n      setCookies(\"auth\", authCookie)\n      setCookies(\"username\", username)\n      setValidSession(true)\n\n    })\n\n  }\n\n  return <VerticalBox horizontalSpacing={'center'} height={\"100vh\"} verticalSpacing={'center'}>\n\n    <VerticalBox width={\"30rem\"} >\n      <Text color=\"red\" margin={'1rem'}>{authErr}</Text>\n      <br />\n      <TextInput onChange={e => setText(e.target.value)} value={text} placeholder=\"input a username\" fill={true} />\n      <Button fill={true} onClick={() => connect()}>Connect</Button>\n    </VerticalBox>\n\n\n\n  </VerticalBox >\n\n}\n\n\n\nconst Lobby = ({ auth, setRoomID }) => {\n\n\n\n  const [looking, setLooking] = useState(false)\n\n  const lookForMatch = () => {\n    auth.emit(\"matchmaking\", (res) => {\n\n      let { status, message } = res\n\n      if (status === 0) return console.log(message)\n\n      setLooking(true)\n\n\n    })\n  }\n\n  useEffect(() => {\n\n    auth.on(\"match-found\", (roomID: string) => {\n      setRoomID(roomID)\n    })\n\n\n  }, [])\n\n\n\n  return <VerticalBox horizontalSpacing={'center'} height={\"100vh\"} verticalSpacing={'center'}>\n\n    <VerticalBox width={\"30rem\"} >\n      <br />\n      {!looking ? <Button fill={true} onClick={() => lookForMatch()}>Start Matchmaking</Button> : <Header>Looking for match</Header>}\n\n    </VerticalBox>\n\n\n\n  </VerticalBox >\n\n}\n\n\n\nconst Room = ({ auth, roomID, }) => {\n\n\n  console.log(\"render\")\n\n  const lastUpdate = useRef(0);\n  const typingTimeout = .5;\n\n  const [text, setText] = useState(\"\")\n  const [typing, setTyping] = useState(false);\n  const [strangerTyping, setStrangerTyping] = useState(false);\n\n  const [chats, setChats] = useState([])\n  let [cookies, setCookies] = useCookies([\"cookie\", \"username\"])\n\n\n\n\n  const timeSort = (a, b) => {\n    return b.timestamp - a.timestamp\n  }\n\n  useEffect(() => {\n\n    const typeChecker = setInterval(() => {\n      const now = +new Date();\n\n      const delta = (now - lastUpdate.current) / 1000;\n\n      if (delta > typingTimeout) {\n        setTyping(false);\n      }\n    }, 1000);\n\n  }, [])\n\n  //send the typing message\n  useEffect(() => {\n    // sendTyping();\n\n\n    auth.emit(\"typing\", {\n      roomID,\n      typing,\n    })\n\n\n  }, [typing]);\n\n\n  useEffect(() => {\n\n\n\n    auth.on(\"chat\", (data) => {\n\n      // copy.sort(timeSort)\n\n      setChats(prevChat => {\n\n        let copy = [...prevChat]\n        copy.push(data)\n        copy.sort(timeSort)\n\n        return copy\n\n      })\n\n      // console.log(`${username}: ${message}`)\n\n\n    })\n\n    auth.on(\"typing\", (data) => {\n\n      let { username, typing, timestamp } = data;\n\n      if (typing) console.log(`${username} is typing`)\n      else console.log(`${username} stopped typing`)\n\n      setStrangerTyping(typing)\n\n\n    })\n\n  }, [])\n\n  const updateText = (e) => {\n    setText(e.target.value);\n    //set typing to true\n    setTyping(true);\n    //update last typed\n    lastUpdate.current = +new Date();\n    console.log(chats)\n\n  };\n\n  const sendChat = () => {\n\n    if (text === \"\") return\n\n    auth.emit(\"chat\", {\n      roomID,\n      message: text,\n    })\n\n    setText(\"\")\n    setTyping(false)\n\n  }\n\n\n\n  const renderChats = chats.map((chat, index) => {\n\n    console.log(`${chat.username}:${index}:${chat.message}`)\n    return <HorizontalBox style={{ flexDirection: cookies.username === chat.username ? \"row-reverse\" : \"row\" }} margin={\".2rem 1rem\"} key={`${chat.username}:${index}:${chat.message}`}>\n\n      <VerticalBox verticalAlignment=\"space-between\" padding=\"1rem\" style={{ border: '1px solid', borderRadius: '.4rem', maxWidth: \"50%\" }}>\n\n        <Text>{chat.message}</Text>\n        <Text size={0.4}></Text>\n\n        <Text style={{ margin: 0, padding: 0, transform: \"translate(0rem, .3rem)\" }} size={0.6} color=\"#acacac\">\n          {new Date(chat.timestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true })}\n        </Text>\n        {/* <Text>{chat.timestamp}</Text> */}\n      </VerticalBox>\n\n    </HorizontalBox>\n\n\n\n  })\n\n\n\n\n\n  return <VerticalBox horizontalSpacing={'center'} height={\"100vh\"} verticalSpacing={'center'}>\n\n    <VerticalBox width={\"30rem\"} >\n      <br />\n      <Header>{strangerTyping ? \"Stranger is typing\" : \"Stranger\"}</Header>\n\n      <VerticalBox padding={'1rem 0'} style={{ overflowY: \"scroll\", flexDirection: 'column-reverse', border: '1px solid', borderRadius: '.2rem', color: '#ddd' }} height={\"40rem\"}>\n\n\n        {renderChats}\n\n\n      </VerticalBox>\n\n      <HorizontalBox>\n        <TextInput\n          value={text}\n          onChange={(e) => updateText(e)}\n          placeholder=\"message\"\n        />\n        <Button primary={true} onClick={() => sendChat()}>\n          Send\n          </Button>\n      </HorizontalBox>\n\n    </VerticalBox>\n\n\n\n  </VerticalBox >\n\n}\n\n","/Users/paquitaladelbarrio/Documents/pr-hummus/chat-typescript/src/index.tsx",[],{"ruleId":"25","severity":1,"message":"26","line":2,"column":8,"nodeType":"27","messageId":"28","endLine":2,"endColumn":12},{"ruleId":"25","severity":1,"message":"29","line":4,"column":38,"nodeType":"27","messageId":"28","endLine":4,"endColumn":46},{"ruleId":"25","severity":1,"message":"30","line":5,"column":10,"nodeType":"27","messageId":"28","endLine":5,"endColumn":16},{"ruleId":"25","severity":1,"message":"31","line":7,"column":8,"nodeType":"27","messageId":"28","endLine":7,"endColumn":14},{"ruleId":"32","severity":1,"message":"33","line":32,"column":6,"nodeType":"34","endLine":32,"endColumn":8,"suggestions":"35"},{"ruleId":"25","severity":1,"message":"36","line":38,"column":9,"nodeType":"27","messageId":"28","endLine":38,"endColumn":21},{"ruleId":"25","severity":1,"message":"37","line":84,"column":11,"nodeType":"27","messageId":"28","endLine":84,"endColumn":26},{"ruleId":"32","severity":1,"message":"38","line":91,"column":6,"nodeType":"34","endLine":91,"endColumn":17,"suggestions":"39"},{"ruleId":"32","severity":1,"message":"40","line":184,"column":6,"nodeType":"34","endLine":184,"endColumn":8,"suggestions":"41"},{"ruleId":"25","severity":1,"message":"42","line":217,"column":17,"nodeType":"27","messageId":"28","endLine":217,"endColumn":27},{"ruleId":"25","severity":1,"message":"43","line":228,"column":11,"nodeType":"27","messageId":"28","endLine":228,"endColumn":22},{"ruleId":"32","severity":1,"message":"44","line":251,"column":6,"nodeType":"34","endLine":251,"endColumn":14,"suggestions":"45"},{"ruleId":"25","severity":1,"message":"46","line":279,"column":31,"nodeType":"27","messageId":"28","endLine":279,"endColumn":40},{"ruleId":"32","severity":1,"message":"33","line":289,"column":6,"nodeType":"34","endLine":289,"endColumn":8,"suggestions":"47"},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Subtitle' is defined but never used.","'Socket' is defined but never used.","'Moment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["48"],"'authenticate' is assigned a value but never used.","'reconnectFailed' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth', 'cookies.auth', and 'deleteCookie'. Either include them or remove the dependency array.",["49"],"React Hook useEffect has missing dependencies: 'auth' and 'setRoomID'. Either include them or remove the dependency array. If 'setRoomID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["50"],"'setCookies' is assigned a value but never used.","'typeChecker' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth' and 'roomID'. Either include them or remove the dependency array.",["51"],"'timestamp' is assigned a value but never used.",["52"],{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},{"desc":"53","fix":"61"},"Update the dependencies array to be: [auth]",{"range":"62","text":"63"},"Update the dependencies array to be: [auth, connected, cookies.auth, deleteCookie]",{"range":"64","text":"65"},"Update the dependencies array to be: [auth, setRoomID]",{"range":"66","text":"67"},"Update the dependencies array to be: [auth, roomID, typing]",{"range":"68","text":"69"},{"range":"70","text":"63"},[744,746],"[auth]",[1593,1604],"[auth, connected, cookies.auth, deleteCookie]",[3483,3485],"[auth, setRoomID]",[4661,4669],"[auth, roomID, typing]",[5207,5209]]